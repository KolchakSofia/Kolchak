import streamlit as st
import pandas as pd
import joblib
from sklearn.base import BaseEstimator, TransformerMixin

df = pd.read_excel('C:\Repoz2\Kolchak\Sprav.xlsx')

group_–¢–æ–≤–∞—Ä–Ω–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è = sorted(df["–¢–æ–≤–∞—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"].dropna().unique())
group_–¢–æ–≤–∞—Ä–Ω–∞—è_–≥—Ä—É–ø–ø–∞ = sorted(df["–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞"].dropna().unique())
group_–¶–µ–ª–µ–≤–∞—è_–≥—Ä—É–ø–ø–∞ = sorted(df["–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞"].dropna().unique())
group_–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç = sorted(df["–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"].dropna().unique())
group_–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ_–æ–±–æ–±—â–µ–Ω–Ω–æ–µ = sorted(df["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–±–æ–±—â–µ–Ω–Ω–æ–µ"].dropna().unique())
group_–∞—Ç—Ä–∏–±—É—Ç1 = sorted(df["–∞—Ç—Ä–∏–±—É—Ç1"].dropna().unique())
group_–∞—Ç—Ä–∏–±—É—Ç2 = sorted(df["–∞—Ç—Ä–∏–±—É—Ç2"].dropna().unique())
group_–∞—Ç—Ä–∏–±—É—Ç4 = sorted(df["–∞—Ç—Ä–∏–±—É—Ç4"].dropna().unique())
group_–°—Ç—Ä–∞–Ω–∞_–æ—Ä–∏–≥–∏–Ω–∞–ª–∞ = sorted(df["–°—Ç—Ä–∞–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞"].dropna().unique())
group_–°—Ç—Ä–∞–Ω–∞_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ = sorted(df["–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"].dropna().unique())
group_–¢–∏–ø_—Ç–∫–∞–Ω–∏ = sorted(df["–¢–∏–ø —Ç–∫–∞–Ω–∏"].dropna().unique())
group_–¶–≤–µ—Ç = sorted(df["–¶–≤–µ—Ç"].dropna().unique())
group_–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å = sorted(df["–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å"].dropna().unique())
group_–≠–ª–µ–º–µ–Ω—Ç—ã_–¥–∏–∑–∞–π–Ω–∞ = sorted(df["–≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞"].dropna().unique())
group_–ü–æ—Å–∞–¥–∫–∞ = sorted(df["–ü–æ—Å–∞–¥–∫–∞"].dropna().unique())
group_–ú–æ–¥–Ω–æ—Å—Ç—å = sorted(df["–ú–æ–¥–Ω–æ—Å—Ç—å"].dropna().unique())
group_–¢–∏–ø_–ø—Ä–æ–¥—É–∫—Ç–∞ = sorted(df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞"].dropna().unique())
group_–ö–æ–ª–ª–µ–∫—Ü–∏—è = sorted(df["–ö–æ–ª–ª–µ–∫—Ü–∏—è"].dropna().unique())
group_–ê—Ç—Ä–∏–±—É—Ç_—Ü–µ–Ω—ã = sorted(df["–ê—Ç—Ä–∏–±—É—Ç —Ü–µ–Ω—ã"].dropna().unique())
group_–ú–ï–°–Ø–¶_PMM = sorted(df["–ú–ï–°–Ø–¶ PMM"].dropna().unique())



class MixedCategoricalEncoder(BaseEstimator, TransformerMixin):
    def __init__(self, threshold=1):
        self.threshold = threshold
        self.one_hot_cols = []
        self.target_encoding_maps = {}

    def fit(self, X, y):
        self.target = y.name if hasattr(y, 'name') else 'target'
        for col in X.select_dtypes(include='object').columns:
            if X[col].nunique() < self.threshold:
                self.one_hot_cols.append(col)
            else:
                self.target_encoding_maps[col] = (
                    X[[col]].join(y).groupby(col)[self.target].mean().to_dict()
                )
        return self

    def transform(self, X):
        X_new = X.copy()
        for col in self.one_hot_cols:
            dummies = pd.get_dummies(X_new[col], prefix=col, drop_first=True, dtype=int)
            X_new = X_new.drop(col, axis=1)
            X_new = pd.concat([X_new, dummies], axis=1)

        for col, mapping in self.target_encoding_maps.items():
            X_new[col] = X_new[col].map(mapping).fillna(0)

        return X_new

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
model = joblib.load("C:\\Repoz\\Kolchak\\et.pkl")
scaler = joblib.load("C:\\Repoz\\Kolchak\\scaler.pkl")
encoder = joblib.load("C:\\Repoz\\Kolchak\\encoder.pkl")

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.set_page_config(page_title="ExtraTrees –ü—Ä–æ–≥–Ω–æ–∑", layout="centered")
st.title("üå≤ ExtraTreesClassifier ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ª–∏–¥–µ—Ä—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞")

with st.form("input_form"):
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        category = st.selectbox("–¢–æ–≤–∞—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",group_–¢–æ–≤–∞—Ä–Ω–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
        group = st.selectbox("–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞", group_–¢–æ–≤–∞—Ä–Ω–∞—è_–≥—Ä—É–ø–ø–∞)
        target_group = st.selectbox("–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞", group_–¶–µ–ª–µ–≤–∞—è_–≥—Ä—É–ø–ø–∞)
        assortment = st.selectbox("–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç", group_–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç)
        size_count = st.number_input("–ö–æ–ª-–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤", 0.0, 20.0, 3.0)
        cost = st.number_input("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", 0.0, 2000.0, 100.0)
        retail_price = st.number_input("–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è", 0.0, 20000.0, 499.0)
    with col2:
        origin = st.selectbox("–°—Ç—Ä–∞–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞", group_–°—Ç—Ä–∞–Ω–∞_–æ—Ä–∏–≥–∏–Ω–∞–ª–∞ )
        country = st.selectbox("–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞", group_–°—Ç—Ä–∞–Ω–∞_–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞)
        fabric = st.selectbox("–¢–∏–ø —Ç–∫–∞–Ω–∏", group_–¢–∏–ø_—Ç–∫–∞–Ω–∏)
        color = st.selectbox("–¶–≤–µ—Ç", group_–¶–≤–µ—Ç)
        design = st.selectbox("–≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞", group_–≠–ª–µ–º–µ–Ω—Ç—ã_–¥–∏–∑–∞–π–Ω–∞)
        fit = st.selectbox("–ü–æ—Å–∞–¥–∫–∞", group_–ü–æ—Å–∞–¥–∫–∞)
        fashion = st.selectbox("–ú–æ–¥–Ω–æ—Å—Ç—å", group_–ú–æ–¥–Ω–æ—Å—Ç—å)
    with col3:
        product_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞", group_–¢–∏–ø_–ø—Ä–æ–¥—É–∫—Ç–∞)
        collection = st.selectbox("–ö–æ–ª–ª–µ–∫—Ü–∏—è", group_–ö–æ–ª–ª–µ–∫—Ü–∏—è)
        prod_type = st.selectbox("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–±–æ–±—â–µ–Ω–Ω–æ–µ", group_–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ_–æ–±–æ–±—â–µ–Ω–Ω–æ–µ)
        imu = st.number_input("IMU", 0.0, 1.5, 0.65)
        attr1 = st.selectbox("–ê—Ç—Ä–∏–±—É—Ç1", group_–∞—Ç—Ä–∏–±—É—Ç1)
        attr2 = st.selectbox("–ê—Ç—Ä–∏–±—É—Ç2", group_–∞—Ç—Ä–∏–±—É—Ç2)
        attr4 = st.selectbox("–ê—Ç—Ä–∏–±—É—Ç4", group_–∞—Ç—Ä–∏–±—É—Ç4)
    with col4:   
        mono = st.selectbox("–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å", group_–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å)
        price_attr = st.selectbox("–ê—Ç—Ä–∏–±—É—Ç —Ü–µ–Ω—ã", group_–ê—Ç—Ä–∏–±—É—Ç_—Ü–µ–Ω—ã)
        year = st.number_input("–ì–æ–¥", 2016, 2030, 2024)
        week = st.number_input("–ù–ï–î–ï–õ–Ø PMM", 1, 53, 20)
        month = st.selectbox("–ú–µ—Å—è—Ü",group_–ú–ï–°–Ø–¶_PMM)
        order_qty = st.number_input("–ó–∞–∫–∞–∑", 0.0, 50000.0, 5000.0)
        depth = st.number_input("–ì–ª—É–±–∏–Ω–∞ –Ω–∞ –º–æ–¥–µ–ª—å", 0.0, 10.0, 3.0)

    submitted = st.form_submit_button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å")

if submitted:
    numeric_df = pd.DataFrame([{
        "–ö–æ–ª-–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤": size_count,
        "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": cost,
        "–¶–µ–Ω–∞ —Ä–æ–∑–Ω–∏—á–Ω–∞—è": retail_price,
        "IMU": imu,
        "–ì–æ–¥": year,
        "–ù–ï–î–ï–õ–Ø PMM": week,
        "–ó–∞–∫–∞–∑": order_qty,
        "–ì–ª—É–±–∏–Ω–∞ –Ω–∞ –º–æ–¥–µ–ª—å": depth
        
    }])

    categorical_df = pd.DataFrame([{
        "–¢–æ–≤–∞—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è": category,
        "–¢–æ–≤–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞": group,
        "–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞": target_group,
        "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç": assortment,
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –æ–±–æ–±—â–µ–Ω–Ω–æ–µ": prod_type,
        "–∞—Ç—Ä–∏–±—É—Ç1": attr1,
        "–∞—Ç—Ä–∏–±—É—Ç2": attr2,
        "–∞—Ç—Ä–∏–±—É—Ç4": attr4,
        "–°—Ç—Ä–∞–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞": origin,
        "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": country,
        "–¢–∏–ø —Ç–∫–∞–Ω–∏": fabric,
        "–¶–≤–µ—Ç": color,
        "–û–¥–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å": mono,
        "–≠–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞": design,
        "–ü–æ—Å–∞–¥–∫–∞": fit,
        "–ú–æ–¥–Ω–æ—Å—Ç—å": fashion,
        "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞": product_type,
        "–ö–æ–ª–ª–µ–∫—Ü–∏—è": collection,
        "–ê—Ç—Ä–∏–±—É—Ç —Ü–µ–Ω—ã": price_attr,
        '–ú–ï–°–Ø–¶ PMM': month
    }])
    encoded_df = encoder.transform(categorical_df)
    full_input = pd.concat([numeric_df.reset_index(drop=True), encoded_df.reset_index(drop=True)], axis=1)
    scaled_input = scaler.transform(full_input)


    proba = model.predict_proba(scaled_input)[0, 1]
    pred = model.predict(scaled_input)[0]

    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç")
    st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∏–¥–µ—Ä—Å—Ç–≤–∞", f"{proba:.2%}")
    if pred == 1:
        st.success("‚úÖ –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å—Ç–∞–Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–º –ø—Ä–æ–¥–∞–∂.")
    else:
        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–º.")